

//admin side
const WorkoutSchema = new mongoose.Schema({
    // Set by coach? User editable - edit form?
    scheduled_date: {
        type: Date,
    }    
    // If null then red on calendar, if not make green?
    completed_date: {
        type: Date
    }
    // name of the workout eg 'shoulder joy'
    workout_title: {
        type: String,
        required: true
    },
    // Links to assigned user
    user_id : {
        type: ObjectId
    }
    // Always by Emily for now - allows flexibility in future?
    trainer_id: {
        type: ObjectId
    }
    // written by trainer, show to user in front end?
    trainer_notes: {
        type: String,
        required: false,
    }
    // user reflection on workout
    user_notes: {
        type: String,
        reqiured: false,
    }
    // squat, 10x20kg
    // squat, 12x25kg
    // [{id, reps, sets, weight, completed}]
    exercises: {[
        type: Array,
        // title: 
        // exercise_id: [ ]
    ]}
}
{ timestamps: true },
)

const ExerciseSchema = new mongoose.Schema({
    _id: {
        type: ObjectId,
        required: true
    }
    exercise_title: {
        type: String,
        required: true
    },
    // array holding the target muscles
    target_muscle: {
        type: [String],
        required: false
    },
    instructions: {
        type: String,
        required: true
    },
    // YouTube link?
    video: {
        type: String,
        required: false,
    }

})


const UserSchema = new mongoose.Schema({ 
    _id: {
        type: ObjectId,
        required: true
    }
    name: {
        firstname: { 
            type: String, 
            required: true 
        },
        lastname: {
            type: String, 
            required: true 
        }
    },
    email: {
        type: String,
        unique: true,
        required: true
    },
    // Depends what auth needs to store
    username: {
        type: String,
        required: true
    },
    password: {
        type: String,
        // Google doesn't return any password
        required: false
    }
    // admin / client / coach
    role: {
        type: String,
        default: 'client',
        required: true,
    },
    // which clients are linked to this admin / coach?
    associated_clients: {
        type: [ObjectId]
    }
    metrics: {
        age: {
            type: Number,
            required: true,
        }
        weight: {
            type: Number,
            required: true,
        },
        height: {
            type: Number,
            required: true,
        },
        waist_circumference: {
            type: Number,
            required: false
        },
    }
    //array of all of the workout IDs done
    Workout_history: {
        type: Array,
        required: true
    }

    // Array of objects -> each object stores date goal was set, the goal itself as a string and a date completed (if null then not completed)
    goals: {
        type: Array,
        required: true
    }
    //array of objects, {date it was added and a link}
    progress_photos: {
        type: Array
        //Cloudinary
        required: false
    },
    // array of objects {date, string of written info about that note}
    eval_notes: {
        type: Array,
        required: false
    }

})
